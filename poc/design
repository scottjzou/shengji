# Sheng Ji Design


## OOP Overview

ShengJiTournament
	- players
		- list of ShengJiPlayer
	- games
		- list of ShengJiGames
		- ShengJiDeck
		- ShengJiRounds


Card
- value
- suit
- owner
- is_in_hand
- play()

ShengJiCard(Card)
- is_score
- is_trump
- is_level


Deck
- list of cards
- draw

Player
- hand_cards (list of card)
- draw(deck)
- level

ShengJiPlayer(Player)
- trump (desired trump suit)
- is_boss
- is_boss_side
- hand_cards
	- map of {suit: list of cards} in hand
- teammates: list of team mates
- raise_trump()
	- a call to raise the trump suit using level cards, check if raise_trump is possible
	- set player
- get_trump()
	- get the suit of the trump class the player desired
- play(current_suit, cards_needed)
	- play the current hands using current_suit with cards_needed amount of cards to be played
	- return the suit 

choose_list = player.hand_cards
play_list 
	- list of cards that player plan to play
// have to play that suit
if len(hand_cards[current_suit]) > 0:
	choose_list = hand_cards[current_suit]
if 


Round
- suit
- winning_card = 0
- winner
- cards
- play()

play(current_players):
	round.suit, round.winning_cards, round.winner = current_players.pop(0).play(None)
	whle len(current_players) != 0:
		challenge_suit, challenge_cards, challenger = current_players.pop(0).play(round.suit)



compare_card(card1, card2)
	is_trump, trump_card = compare_trump(card1, card2)
	if trump_card is not None:
		return
	return 


compare_trump
	- if card1.is_trump == card2.is_trump:
		(they are equal in trumpness)
		return None

for card in cards:
	if compare_card(card, winning_card) >= 0:
		winning_card = card
		winner = card.player
return winning_card, winner, score

Game
- deck
- compare_card(card1, card2)

ShengJiGame
- level (current level of the game)
- trump_suit
- game_scores
	- map of player and their scores
- boss_team: {boss:player_1, boss_friend:player_3}
- chanllenger_team: {chanllenger:player_2, chanllenger:player_4}
- current_players 
	- players in the play order
- unplayed_rounds
	- list of executed rounds
- played_rounds
- winner
- winning_levels
- start()
- play()
- get_boss()

start()
while game.deck.is_not_empty():	
	for player in players:
		player.draw(game.deck)
		if player.raise_trump():
			game.trump_suit = player.get_trump()
game.get_boss()

play()
whiel len(unplayed_rounds) != 0:
	current_round = unplayed_rounds.pop()
	game_scores = game_scores.update(current_round.play(current_players))
	played_rounds.append(current_round)
return evaluate_scores()







